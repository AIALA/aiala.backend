// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aiala.Backend.Data;

namespace aiala.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190603154213_AddFreeFormPlace")]
    partial class AddFreeFormPlace
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("aiala")
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("aiala.Backend.Data.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("TenantId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts","directory");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActiveStepId");

                    b.Property<Guid?>("ActiveTaskId");

                    b.Property<string>("ActivityData");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<Guid?>("TenantId");

                    b.Property<DateTimeOffset>("TimeCreated");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ActiveStepId");

                    b.HasIndex("ActiveTaskId");

                    b.HasIndex("TenantId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");
                });

            modelBuilder.Entity("aiala.Backend.Data.Pictures.AiPictureMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<float>("DescriptionConfidence");

                    b.Property<bool>("HasHumanConfidence");

                    b.Property<Guid>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.ToTable("AiPictureMetadatas");
                });

            modelBuilder.Entity("aiala.Backend.Data.Pictures.AiPictureTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Confidence");

                    b.Property<bool>("HasHumanConfidence");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("AiPictureTags");
                });

            modelBuilder.Entity("aiala.Backend.Data.Pictures.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("PictureType");

                    b.Property<string>("StorageDirectLink");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("aiala.Backend.Data.Places.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PictureId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("TenantId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.ScheduledPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PictureId");

                    b.Property<Guid?>("PlaceId");

                    b.Property<Guid>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("ScheduledPlace");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.ScheduledStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<int>("State");

                    b.Property<Guid?>("TaskId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("ScheduledSteps");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.ScheduledTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DayId");

                    b.Property<TimeSpan>("DefaultDuration");

                    b.Property<Guid?>("EmergencyContact1Id");

                    b.Property<Guid?>("EmergencyContact2Id");

                    b.Property<TimeSpan>("End");

                    b.Property<TimeSpan>("ExpirationOffset");

                    b.Property<int>("Feedback");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PictureId");

                    b.Property<TimeSpan>("Start");

                    b.Property<Guid?>("TaskId");

                    b.Property<bool>("UseTaskContacts");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("EmergencyContact1Id");

                    b.HasIndex("EmergencyContact2Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("TaskId");

                    b.ToTable("ScheduledTasks");
                });

            modelBuilder.Entity("aiala.Backend.Data.Tasks.AppTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<TimeSpan>("Duration");

                    b.Property<Guid?>("EmergencyContact1Id");

                    b.Property<Guid?>("EmergencyContact2Id");

                    b.Property<string>("FreeFormPlace");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PictureId");

                    b.Property<Guid?>("PlaceId");

                    b.Property<Guid?>("TenantId");

                    b.Property<bool>("UseTaskContacts");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EmergencyContact1Id");

                    b.HasIndex("EmergencyContact2Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TenantId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("aiala.Backend.Data.Tasks.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<Guid?>("TaskId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("aiala.Backend.Data.Templates.DayTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DayName");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DayTemplates");
                });

            modelBuilder.Entity("aiala.Backend.Data.Templates.ScheduledTaskTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DayTemplateId");

                    b.Property<TimeSpan>("End");

                    b.Property<TimeSpan>("Start");

                    b.Property<Guid>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("DayTemplateId");

                    b.HasIndex("TaskId");

                    b.ToTable("ScheduledTaskTemplates");
                });

            modelBuilder.Entity("aiala.Backend.Data.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Culture")
                        .HasMaxLength(10);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<string>("Region")
                        .HasMaxLength(100);

                    b.Property<int>("TenantType");

                    b.HasKey("Id");

                    b.ToTable("Tenants","directory");
                });

            modelBuilder.Entity("aiala.Backend.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActiveAccountId");

                    b.Property<string>("Culture")
                        .HasMaxLength(10);

                    b.Property<string>("Email");

                    b.Property<string>("ExternalUserId");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.HasKey("Id");

                    b.ToTable("Users","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.App<aiala.Backend.Data.Tenant>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Key");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Apps","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CallingCode");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries","directory");

                    b.HasData(
                        new { Id = new Guid("44e996a7-fb2c-41bf-917f-02f3dd79f639"), CallingCode = "+93", Code = "AF", Enabled = true, Name = "Afghanistan" },
                        new { Id = new Guid("0b4f312f-3456-4cc9-ba85-acb48b9e7e9e"), CallingCode = "+358", Code = "AX", Enabled = true, Name = "Åland Islands" },
                        new { Id = new Guid("7a551b34-cb89-40bd-820e-7bf0c5603536"), CallingCode = "+355", Code = "AL", Enabled = true, Name = "Albania" },
                        new { Id = new Guid("0a1fadde-e103-40f3-94f8-ae58e70ee91d"), CallingCode = "+213", Code = "DZ", Enabled = true, Name = "Algeria" },
                        new { Id = new Guid("f0b72653-ebba-457a-b38b-9a17762f6141"), CallingCode = "+1684", Code = "AS", Enabled = true, Name = "American Samoa" },
                        new { Id = new Guid("c6d869a6-9592-465c-bb33-3635511aae8e"), CallingCode = "+376", Code = "AD", Enabled = true, Name = "Andorra" },
                        new { Id = new Guid("d42a610c-d6a2-4376-b8fa-e0cc24998d96"), CallingCode = "+244", Code = "AO", Enabled = true, Name = "Angola" },
                        new { Id = new Guid("cdede895-15cf-4b19-a518-8da0211f76b7"), CallingCode = "+1264", Code = "AI", Enabled = true, Name = "Anguilla" },
                        new { Id = new Guid("a228d247-1f29-487b-8c88-a7af387391c6"), CallingCode = "+672", Code = "AQ", Enabled = true, Name = "Antarctica" },
                        new { Id = new Guid("874ef0b2-ca3e-41ef-af1b-2aea2c0a5769"), CallingCode = "+1268", Code = "AG", Enabled = true, Name = "Antigua and Barbuda" },
                        new { Id = new Guid("ca39433d-6984-4567-a717-3fc948ea8d52"), CallingCode = "+54", Code = "AR", Enabled = true, Name = "Argentina" },
                        new { Id = new Guid("6eeb4317-ea6c-493d-9af0-d1976d7100de"), CallingCode = "+374", Code = "AM", Enabled = true, Name = "Armenia" },
                        new { Id = new Guid("c64c69c8-9060-4251-852b-1f40c2df9124"), CallingCode = "+297", Code = "AW", Enabled = true, Name = "Aruba" },
                        new { Id = new Guid("714c382f-db01-4fca-bdfe-f0a7b244236f"), CallingCode = "+61", Code = "AU", Enabled = true, Name = "Australia" },
                        new { Id = new Guid("c75b1cfd-ebe2-4255-a6b6-28643f872152"), CallingCode = "+43", Code = "AT", Enabled = true, Name = "Austria" },
                        new { Id = new Guid("dc9ffe90-bb21-4e89-aea2-267ce1d029fd"), CallingCode = "+994", Code = "AZ", Enabled = true, Name = "Azerbaijan" },
                        new { Id = new Guid("34d69641-9b8b-4c79-9e14-7ad3f49a7314"), CallingCode = "+1242", Code = "BS", Enabled = true, Name = "Bahamas" },
                        new { Id = new Guid("477d8fbc-e80a-489e-aba2-736293a699fb"), CallingCode = "+973", Code = "BH", Enabled = true, Name = "Bahrain" },
                        new { Id = new Guid("1cc45f40-784c-43b2-9b88-70d8b3cec6c3"), CallingCode = "+880", Code = "BD", Enabled = true, Name = "Bangladesh" },
                        new { Id = new Guid("ab43ea54-d4b6-4b56-bf9e-91f73f8516ea"), CallingCode = "+1246", Code = "BB", Enabled = true, Name = "Barbados" },
                        new { Id = new Guid("a380394e-7990-4864-bca2-2832527192d6"), CallingCode = "+375", Code = "BY", Enabled = true, Name = "Belarus" },
                        new { Id = new Guid("845bda9a-97c2-48ca-bb31-8f25ceb2bcab"), CallingCode = "+32", Code = "BE", Enabled = true, Name = "Belgium" },
                        new { Id = new Guid("c978ac1e-7cfe-412b-a231-3195e0b31279"), CallingCode = "+501", Code = "BZ", Enabled = true, Name = "Belize" },
                        new { Id = new Guid("54372766-53d0-4c1c-9784-71e056d9c7d9"), CallingCode = "+229", Code = "BJ", Enabled = true, Name = "Benin" },
                        new { Id = new Guid("725a2cd5-cd9d-4f5f-9abc-e340f0b5e07a"), CallingCode = "+1441", Code = "BM", Enabled = true, Name = "Bermuda" },
                        new { Id = new Guid("6c99985d-4372-4d21-97c4-822863b28cf9"), CallingCode = "+975", Code = "BT", Enabled = true, Name = "Bhutan" },
                        new { Id = new Guid("5c0d4d2b-9905-4485-9fc0-d8858ab2d3a8"), CallingCode = "+591", Code = "BO", Enabled = true, Name = "Bolivia (Plurinational State of)" },
                        new { Id = new Guid("290a4868-b537-41bf-b514-b36ddde77e32"), CallingCode = "+5997", Code = "BQ", Enabled = true, Name = "Bonaire, Sint Eustatius and Saba" },
                        new { Id = new Guid("529b34dd-12f1-4b52-9270-bd122ea8cc5f"), CallingCode = "+387", Code = "BA", Enabled = true, Name = "Bosnia and Herzegovina" },
                        new { Id = new Guid("92414cfd-4ba3-469d-b951-3ff06eecffdc"), CallingCode = "+267", Code = "BW", Enabled = true, Name = "Botswana" },
                        new { Id = new Guid("9d19efbd-70e8-4817-afbb-fb735ff78ad7"), CallingCode = "+", Code = "BV", Enabled = true, Name = "Bouvet Island" },
                        new { Id = new Guid("d6a33871-b015-4015-ac21-9a95ae8c89e5"), CallingCode = "+55", Code = "br", Enabled = true, Name = "Brazil" },
                        new { Id = new Guid("2e38cb7e-7dc3-40a7-a947-533fd1134105"), CallingCode = "+246", Code = "IO", Enabled = true, Name = "British Indian Ocean Territory" },
                        new { Id = new Guid("d83ca70f-d185-4c87-b82a-6cba91de7531"), CallingCode = "+", Code = "UM", Enabled = true, Name = "United States Minor Outlying Islands" },
                        new { Id = new Guid("f2c63602-3db9-401f-a8bc-e352359dd77d"), CallingCode = "+1284", Code = "VG", Enabled = true, Name = "Virgin Islands (British)" },
                        new { Id = new Guid("b21c14d5-09e3-4f22-952e-f739db8b2dc0"), CallingCode = "+1 340", Code = "VI", Enabled = true, Name = "Virgin Islands (U.S.)" },
                        new { Id = new Guid("234e687b-9acf-4268-9d64-1b622f43e673"), CallingCode = "+673", Code = "BN", Enabled = true, Name = "Brunei Darussalam" },
                        new { Id = new Guid("db9524e7-418a-47ca-a207-982af4c59666"), CallingCode = "+359", Code = "BG", Enabled = true, Name = "Bulgaria" },
                        new { Id = new Guid("8216f3c7-2a58-42e8-acd4-308021850354"), CallingCode = "+226", Code = "BF", Enabled = true, Name = "Burkina Faso" },
                        new { Id = new Guid("56aca540-4ae2-43cf-bdff-72ea9b868780"), CallingCode = "+257", Code = "BI", Enabled = true, Name = "Burundi" },
                        new { Id = new Guid("9651830d-20e4-4222-aa36-1b596500670d"), CallingCode = "+855", Code = "KH", Enabled = true, Name = "Cambodia" },
                        new { Id = new Guid("dda9bd73-0cb2-423d-adcc-ee0d393b22b5"), CallingCode = "+237", Code = "CM", Enabled = true, Name = "Cameroon" },
                        new { Id = new Guid("f83ba14a-2758-45ef-93df-10170b0759c3"), CallingCode = "+1", Code = "CA", Enabled = true, Name = "Canada" },
                        new { Id = new Guid("bf5f1f0f-9b12-41a4-a1aa-438c6a3af860"), CallingCode = "+238", Code = "CV", Enabled = true, Name = "Cabo Verde" },
                        new { Id = new Guid("aa85fc2b-e3a5-4849-b869-724d61bc383e"), CallingCode = "+1345", Code = "KY", Enabled = true, Name = "Cayman Islands" },
                        new { Id = new Guid("f30caf70-5235-4f4d-b300-c63efa33b1b1"), CallingCode = "+236", Code = "CF", Enabled = true, Name = "Central African Republic" },
                        new { Id = new Guid("7cf19a97-a4f6-4a07-8dee-8175b1c3cd7d"), CallingCode = "+235", Code = "TD", Enabled = true, Name = "Chad" },
                        new { Id = new Guid("668e3ca5-8bfb-4f8c-8c98-207e3889f0fe"), CallingCode = "+56", Code = "CL", Enabled = true, Name = "Chile" },
                        new { Id = new Guid("8e6e14e7-d429-4837-bb2b-e84f6cc3299a"), CallingCode = "+86", Code = "CN", Enabled = true, Name = "China" },
                        new { Id = new Guid("a349e604-c2d1-403f-82ec-01c41c26825e"), CallingCode = "+61", Code = "CX", Enabled = true, Name = "Christmas Island" },
                        new { Id = new Guid("c7524e4a-6065-4fa6-a33b-215ae8f87e86"), CallingCode = "+61", Code = "CC", Enabled = true, Name = "Cocos (Keeling) Islands" },
                        new { Id = new Guid("4cdcb59b-7021-4c86-8fa2-87b807460ad9"), CallingCode = "+57", Code = "CO", Enabled = true, Name = "Colombia" },
                        new { Id = new Guid("50edd070-117c-4b0a-ad32-97607b3b4fb5"), CallingCode = "+269", Code = "KM", Enabled = true, Name = "Comoros" },
                        new { Id = new Guid("0fe76a29-bd01-4578-b770-f1f51dbf7172"), CallingCode = "+242", Code = "CG", Enabled = true, Name = "Congo" },
                        new { Id = new Guid("f28a2a31-b33e-410a-8418-5f84240a37d2"), CallingCode = "+243", Code = "CD", Enabled = true, Name = "Congo (Democratic Republic of the)" },
                        new { Id = new Guid("47b942da-f582-4a85-9347-edf92e14ea86"), CallingCode = "+682", Code = "CK", Enabled = true, Name = "Cook Islands" },
                        new { Id = new Guid("3fea9a2d-c0ef-40a3-8128-c589e95c3537"), CallingCode = "+506", Code = "CR", Enabled = true, Name = "Costa Rica" },
                        new { Id = new Guid("9c22df3d-bbbf-4a8a-a0ef-b1720bc43463"), CallingCode = "+385", Code = "hr", Enabled = true, Name = "Croatia" },
                        new { Id = new Guid("583cb448-7e2d-4c30-9835-343bbf977e9b"), CallingCode = "+53", Code = "CU", Enabled = true, Name = "Cuba" },
                        new { Id = new Guid("31387bd8-b5d7-41c0-9807-d39d3a4453dc"), CallingCode = "+599", Code = "CW", Enabled = true, Name = "Curaçao" },
                        new { Id = new Guid("ed266508-e26e-4708-8d21-23154619c3fa"), CallingCode = "+357", Code = "CY", Enabled = true, Name = "Cyprus" },
                        new { Id = new Guid("b89fdca4-86a7-487a-b647-d2defee26a13"), CallingCode = "+420", Code = "CZ", Enabled = true, Name = "Czech Republic" },
                        new { Id = new Guid("f1ac9aeb-e891-4315-ac5e-5e9beebc3305"), CallingCode = "+45", Code = "DK", Enabled = true, Name = "Denmark" },
                        new { Id = new Guid("ee76f5bd-7d77-440f-9aaf-186af4e13ba5"), CallingCode = "+253", Code = "DJ", Enabled = true, Name = "Djibouti" },
                        new { Id = new Guid("4f720a85-1987-4d83-8739-b71595daaa8b"), CallingCode = "+1767", Code = "DM", Enabled = true, Name = "Dominica" },
                        new { Id = new Guid("168ca0f0-7e9f-499f-96e8-4131fc0f70a6"), CallingCode = "+1809", Code = "DO", Enabled = true, Name = "Dominican Republic" },
                        new { Id = new Guid("8a54bca0-807d-4cdf-8047-d317433757f5"), CallingCode = "+593", Code = "EC", Enabled = true, Name = "Ecuador" },
                        new { Id = new Guid("41a606dd-4c52-438d-a9ec-df14591cbf3e"), CallingCode = "+20", Code = "EG", Enabled = true, Name = "Egypt" },
                        new { Id = new Guid("11b4d693-dd81-4b9b-8c80-50a2fae110d3"), CallingCode = "+503", Code = "SV", Enabled = true, Name = "El Salvador" },
                        new { Id = new Guid("fb4d2c5a-5f93-4130-a03a-6885d2ff906b"), CallingCode = "+240", Code = "GQ", Enabled = true, Name = "Equatorial Guinea" },
                        new { Id = new Guid("0d41eff4-8d55-43e1-b94d-39631d7bfb54"), CallingCode = "+291", Code = "ER", Enabled = true, Name = "Eritrea" },
                        new { Id = new Guid("d9bc2c41-5b53-473c-869c-6cab75c50a59"), CallingCode = "+372", Code = "EE", Enabled = true, Name = "Estonia" },
                        new { Id = new Guid("b9fdfe8b-b370-4ffe-9160-d5a76af13a39"), CallingCode = "+251", Code = "ET", Enabled = true, Name = "Ethiopia" },
                        new { Id = new Guid("c57a4fb1-b16e-4371-8553-e120064084f9"), CallingCode = "+500", Code = "FK", Enabled = true, Name = "Falkland Islands (Malvinas)" },
                        new { Id = new Guid("495cc6a5-0016-44e1-8004-e7fbfd41a630"), CallingCode = "+298", Code = "FO", Enabled = true, Name = "Faroe Islands" },
                        new { Id = new Guid("6e2cb01a-d6c3-4ca2-8b13-48b3367735d2"), CallingCode = "+679", Code = "FJ", Enabled = true, Name = "Fiji" },
                        new { Id = new Guid("b4dde644-e38a-48ce-883e-0a9d8dd65758"), CallingCode = "+358", Code = "FI", Enabled = true, Name = "Finland" },
                        new { Id = new Guid("cc7464a1-8300-450d-bd12-9e93c5307a09"), CallingCode = "+33", Code = "fr", Enabled = true, Name = "France" },
                        new { Id = new Guid("c0eb726b-84d4-442d-bb98-4eb0f9d628b6"), CallingCode = "+594", Code = "GF", Enabled = true, Name = "French Guiana" },
                        new { Id = new Guid("95a16c33-9300-4336-bc0b-c2e02220885e"), CallingCode = "+689", Code = "PF", Enabled = true, Name = "French Polynesia" },
                        new { Id = new Guid("fce57936-adc2-4a55-90be-b4c3476fd23e"), CallingCode = "+", Code = "TF", Enabled = true, Name = "French Southern Territories" },
                        new { Id = new Guid("8c772dab-d696-403e-96ba-5d3c3284dfc1"), CallingCode = "+241", Code = "GA", Enabled = true, Name = "Gabon" },
                        new { Id = new Guid("068f8b83-66a2-47ba-8285-7e815cf9c677"), CallingCode = "+220", Code = "GM", Enabled = true, Name = "Gambia" },
                        new { Id = new Guid("fa1f6ca9-2c38-4ab6-b361-1af88e919ae5"), CallingCode = "+995", Code = "GE", Enabled = true, Name = "Georgia" },
                        new { Id = new Guid("b04eb0d3-e4f6-4803-8bac-913ed58cd7d1"), CallingCode = "+49", Code = "de", Enabled = true, Name = "Germany" },
                        new { Id = new Guid("cfe3c5b5-d629-4887-83f9-ea9e3ea32ae8"), CallingCode = "+233", Code = "GH", Enabled = true, Name = "Ghana" },
                        new { Id = new Guid("0a25ab32-695f-4ecb-a47c-e0da577d36ee"), CallingCode = "+350", Code = "GI", Enabled = true, Name = "Gibraltar" },
                        new { Id = new Guid("b7b1727a-e52f-45af-8a06-8337320eb960"), CallingCode = "+30", Code = "GR", Enabled = true, Name = "Greece" },
                        new { Id = new Guid("8a8d21ac-da3d-47f0-8049-84fbbaeee508"), CallingCode = "+299", Code = "GL", Enabled = true, Name = "Greenland" },
                        new { Id = new Guid("27e8ba9e-58fc-48a1-8e92-f3f8bc846557"), CallingCode = "+1473", Code = "GD", Enabled = true, Name = "Grenada" },
                        new { Id = new Guid("4f3cbce7-8ab8-44e5-a58f-4b4a7da09f43"), CallingCode = "+590", Code = "GP", Enabled = true, Name = "Guadeloupe" },
                        new { Id = new Guid("fbb1feed-b0d0-4a50-9e88-bb541fc56537"), CallingCode = "+1671", Code = "GU", Enabled = true, Name = "Guam" },
                        new { Id = new Guid("61662609-003a-4097-95f8-6598bf26a4ef"), CallingCode = "+502", Code = "GT", Enabled = true, Name = "Guatemala" },
                        new { Id = new Guid("c0fb1455-53a6-44e6-88dd-1809082063c7"), CallingCode = "+44", Code = "GG", Enabled = true, Name = "Guernsey" },
                        new { Id = new Guid("670cba88-5a11-42b9-9377-f49805633bf4"), CallingCode = "+224", Code = "GN", Enabled = true, Name = "Guinea" },
                        new { Id = new Guid("abddcd95-2dda-48e1-9e41-0503df5d489c"), CallingCode = "+245", Code = "GW", Enabled = true, Name = "Guinea-Bissau" },
                        new { Id = new Guid("4f0eb234-b1f0-4410-846c-6bb4bab31519"), CallingCode = "+592", Code = "GY", Enabled = true, Name = "Guyana" },
                        new { Id = new Guid("7e9acba5-29d1-400c-b198-3d235bc0c9dc"), CallingCode = "+509", Code = "HT", Enabled = true, Name = "Haiti" },
                        new { Id = new Guid("d9cf3244-5eb0-4f47-ae9c-e48b948ad068"), CallingCode = "+", Code = "HM", Enabled = true, Name = "Heard Island and McDonald Islands" },
                        new { Id = new Guid("818d2dc0-a89a-4c46-85a9-4f363e084187"), CallingCode = "+379", Code = "VA", Enabled = true, Name = "Holy See" },
                        new { Id = new Guid("bd2c6e92-2765-4dc3-b79e-8d7c0ac6fdd4"), CallingCode = "+504", Code = "HN", Enabled = true, Name = "Honduras" },
                        new { Id = new Guid("ebf23b09-1151-4855-a3f6-e9fd51fef715"), CallingCode = "+852", Code = "HK", Enabled = true, Name = "Hong Kong" },
                        new { Id = new Guid("78eb9514-06e7-493e-a495-f84c531a7791"), CallingCode = "+36", Code = "HU", Enabled = true, Name = "Hungary" },
                        new { Id = new Guid("f202c2af-1dd0-4882-99f0-082cb5776b2a"), CallingCode = "+354", Code = "IS", Enabled = true, Name = "Iceland" },
                        new { Id = new Guid("1c6c52d5-c467-47d4-a18a-84b367ba4311"), CallingCode = "+91", Code = "IN", Enabled = true, Name = "India" },
                        new { Id = new Guid("88b339cf-a9c9-4e44-ab05-5c6e3cadcb6d"), CallingCode = "+62", Code = "id", Enabled = true, Name = "Indonesia" },
                        new { Id = new Guid("fce81138-2079-4bd2-ac13-e9e08e486232"), CallingCode = "+225", Code = "CI", Enabled = true, Name = "Côte d'Ivoire" },
                        new { Id = new Guid("e2a89a18-6f76-4318-a87d-6e1eb5d913d1"), CallingCode = "+98", Code = "IR", Enabled = true, Name = "Iran (Islamic Republic of)" },
                        new { Id = new Guid("ab0bfe63-8589-412a-afd5-f3e105d20568"), CallingCode = "+964", Code = "IQ", Enabled = true, Name = "Iraq" },
                        new { Id = new Guid("5a547753-2720-4ef8-9fd7-ffadd1036c72"), CallingCode = "+353", Code = "IE", Enabled = true, Name = "Ireland" },
                        new { Id = new Guid("cdafe458-b575-4207-823a-8c28e6630c70"), CallingCode = "+44", Code = "IM", Enabled = true, Name = "Isle of Man" },
                        new { Id = new Guid("c9c252be-8cfe-4f34-ba7d-3c8b11b551c7"), CallingCode = "+972", Code = "IL", Enabled = true, Name = "Israel" },
                        new { Id = new Guid("d9a2e10d-8735-405e-9ea1-a00a7784dd56"), CallingCode = "+39", Code = "it", Enabled = true, Name = "Italy" },
                        new { Id = new Guid("e8407507-47db-4672-89f0-6052fc97ac5b"), CallingCode = "+1876", Code = "JM", Enabled = true, Name = "Jamaica" },
                        new { Id = new Guid("cf2b6264-a1fe-43a2-b9d0-f92f41a62da8"), CallingCode = "+81", Code = "JP", Enabled = true, Name = "Japan" },
                        new { Id = new Guid("9343700a-a38e-44a9-b62f-6a069a17fdb6"), CallingCode = "+44", Code = "JE", Enabled = true, Name = "Jersey" },
                        new { Id = new Guid("dacf22ad-417b-436f-a73f-59a47b2324b4"), CallingCode = "+962", Code = "JO", Enabled = true, Name = "Jordan" },
                        new { Id = new Guid("ba3775f7-cb5c-4437-b1f2-ca7156560e53"), CallingCode = "+76", Code = "KZ", Enabled = true, Name = "Kazakhstan" },
                        new { Id = new Guid("66e5ac2b-c3ee-49c3-a25a-437b3d918e91"), CallingCode = "+254", Code = "KE", Enabled = true, Name = "Kenya" },
                        new { Id = new Guid("098ad535-c846-4473-8a6d-a89f1f762e93"), CallingCode = "+686", Code = "KI", Enabled = true, Name = "Kiribati" },
                        new { Id = new Guid("92a086ad-64cc-4209-a1a7-c2002c1dfe69"), CallingCode = "+965", Code = "KW", Enabled = true, Name = "Kuwait" },
                        new { Id = new Guid("2cdba5e4-4235-4c15-8eff-9dbbde91c8cc"), CallingCode = "+996", Code = "KG", Enabled = true, Name = "Kyrgyzstan" },
                        new { Id = new Guid("a7e1fca7-dcc0-4873-9d1f-c170b5bf25a9"), CallingCode = "+856", Code = "LA", Enabled = true, Name = "Lao People's Democratic Republic" },
                        new { Id = new Guid("ae7b0ee4-e00f-436d-a9cc-55eb493a392f"), CallingCode = "+371", Code = "LV", Enabled = true, Name = "Latvia" },
                        new { Id = new Guid("743de50e-6fa1-4272-97e1-06bc862fe505"), CallingCode = "+961", Code = "LB", Enabled = true, Name = "Lebanon" },
                        new { Id = new Guid("81a28038-c55d-4eca-8e68-668b2864fd98"), CallingCode = "+266", Code = "LS", Enabled = true, Name = "Lesotho" },
                        new { Id = new Guid("c2473d84-7c6b-4b32-a624-77419bef5104"), CallingCode = "+231", Code = "LR", Enabled = true, Name = "Liberia" },
                        new { Id = new Guid("c4fb5e61-c37f-4e5f-b70b-65c7ff3a24b8"), CallingCode = "+218", Code = "LY", Enabled = true, Name = "Libya" },
                        new { Id = new Guid("2a7a9ede-fcf3-4455-9cd2-daaf2f07851d"), CallingCode = "+423", Code = "LI", Enabled = true, Name = "Liechtenstein" },
                        new { Id = new Guid("08051e14-d13e-4e9e-90a6-0f3c4fc7b6d8"), CallingCode = "+370", Code = "LT", Enabled = true, Name = "Lithuania" },
                        new { Id = new Guid("363ae089-3a30-478d-b49f-5c7b9bdafe50"), CallingCode = "+352", Code = "LU", Enabled = true, Name = "Luxembourg" },
                        new { Id = new Guid("0e14972b-4f7c-4d6d-938b-ca6360b0872b"), CallingCode = "+853", Code = "MO", Enabled = true, Name = "Macao" },
                        new { Id = new Guid("39035db4-10a0-4070-9fa6-b703a9a79199"), CallingCode = "+389", Code = "MK", Enabled = true, Name = "Macedonia (the former Yugoslav Republic of)" },
                        new { Id = new Guid("603218e7-8773-44ef-a1de-34b7d5d7b21e"), CallingCode = "+261", Code = "MG", Enabled = true, Name = "Madagascar" },
                        new { Id = new Guid("b07d1ada-7a09-484e-aa77-97ce1b769ac7"), CallingCode = "+265", Code = "MW", Enabled = true, Name = "Malawi" },
                        new { Id = new Guid("c895cb3b-0be9-44e5-8bd9-3c5ddbeac938"), CallingCode = "+60", Code = "MY", Enabled = true, Name = "Malaysia" },
                        new { Id = new Guid("39dcf65d-b256-4c48-9ffe-2cfd92d9adb1"), CallingCode = "+960", Code = "MV", Enabled = true, Name = "Maldives" },
                        new { Id = new Guid("d6ecbf46-a0a5-4e61-89f9-c9acd0782532"), CallingCode = "+223", Code = "ML", Enabled = true, Name = "Mali" },
                        new { Id = new Guid("dc48c0ec-8c3b-4d06-9283-935fa5453730"), CallingCode = "+356", Code = "MT", Enabled = true, Name = "Malta" },
                        new { Id = new Guid("c2195d27-4ca3-46f9-b289-8250e32dd019"), CallingCode = "+692", Code = "MH", Enabled = true, Name = "Marshall Islands" },
                        new { Id = new Guid("cb7d0d8e-7612-44b6-a1d6-9ac33762a823"), CallingCode = "+596", Code = "MQ", Enabled = true, Name = "Martinique" },
                        new { Id = new Guid("02778799-6b45-47be-923f-7a1cd2e287a2"), CallingCode = "+222", Code = "MR", Enabled = true, Name = "Mauritania" },
                        new { Id = new Guid("76819034-2d0b-4296-bb93-4c61927f9d8d"), CallingCode = "+230", Code = "MU", Enabled = true, Name = "Mauritius" },
                        new { Id = new Guid("9e974584-f073-415c-b535-9bf6f8f83fbc"), CallingCode = "+262", Code = "YT", Enabled = true, Name = "Mayotte" },
                        new { Id = new Guid("23440164-15e7-4aa2-ba50-6699b81b31ff"), CallingCode = "+52", Code = "MX", Enabled = true, Name = "Mexico" },
                        new { Id = new Guid("8328c807-7bb3-4c7e-82d8-d72b0c148204"), CallingCode = "+691", Code = "FM", Enabled = true, Name = "Micronesia (Federated States of)" },
                        new { Id = new Guid("80ddc377-d6d3-40d0-aa85-b17907310d2b"), CallingCode = "+373", Code = "MD", Enabled = true, Name = "Moldova (Republic of)" },
                        new { Id = new Guid("f7dcbb8a-90d6-4008-89f9-fa8cd241d66f"), CallingCode = "+377", Code = "MC", Enabled = true, Name = "Monaco" },
                        new { Id = new Guid("2c691e17-979b-4192-a106-3ccc4da056a6"), CallingCode = "+976", Code = "MN", Enabled = true, Name = "Mongolia" },
                        new { Id = new Guid("a2141dc6-5c4b-400f-bdb1-211ac5081954"), CallingCode = "+382", Code = "ME", Enabled = true, Name = "Montenegro" },
                        new { Id = new Guid("0da60206-a3f5-4a18-a8b6-630e12719c82"), CallingCode = "+1664", Code = "MS", Enabled = true, Name = "Montserrat" },
                        new { Id = new Guid("d8b3c897-69e1-4bd0-aecf-668b0dadffc7"), CallingCode = "+212", Code = "MA", Enabled = true, Name = "Morocco" },
                        new { Id = new Guid("ce56bc91-b97f-4f14-8c02-7e4ec2c6b1be"), CallingCode = "+258", Code = "MZ", Enabled = true, Name = "Mozambique" },
                        new { Id = new Guid("cbb6a6af-e1e0-4d6d-a908-58b8f130576e"), CallingCode = "+95", Code = "MM", Enabled = true, Name = "Myanmar" },
                        new { Id = new Guid("ecd1a960-7846-4599-b78c-ae0bbfbf8f54"), CallingCode = "+264", Code = "NA", Enabled = true, Name = "Namibia" },
                        new { Id = new Guid("8cce699e-b033-4b9b-902e-6483da7ca19a"), CallingCode = "+674", Code = "NR", Enabled = true, Name = "Nauru" },
                        new { Id = new Guid("15d6f9ea-1026-4ad3-88f8-f3e8f1eb6f6e"), CallingCode = "+977", Code = "NP", Enabled = true, Name = "Nepal" },
                        new { Id = new Guid("c8ac2c56-36fd-40f2-9ea9-6974f2387a0e"), CallingCode = "+31", Code = "nl", Enabled = true, Name = "Netherlands" },
                        new { Id = new Guid("c41c146e-66c6-4b79-83bc-d18117231f31"), CallingCode = "+687", Code = "NC", Enabled = true, Name = "New Caledonia" },
                        new { Id = new Guid("7659bcc4-41cf-4846-bab8-2bae6f938359"), CallingCode = "+64", Code = "NZ", Enabled = true, Name = "New Zealand" },
                        new { Id = new Guid("2a032347-4030-4119-babc-95e1da3e8e16"), CallingCode = "+505", Code = "NI", Enabled = true, Name = "Nicaragua" },
                        new { Id = new Guid("c00c5c0b-c6be-4d27-b4db-302443d57439"), CallingCode = "+227", Code = "NE", Enabled = true, Name = "Niger" },
                        new { Id = new Guid("a53ee786-5790-445b-95cc-cdf563cb599e"), CallingCode = "+234", Code = "NG", Enabled = true, Name = "Nigeria" },
                        new { Id = new Guid("aef0117a-7970-4a60-9fc1-279c8c8b6eb6"), CallingCode = "+683", Code = "NU", Enabled = true, Name = "Niue" },
                        new { Id = new Guid("158eb17f-f08d-42cc-95a4-057f7133ae51"), CallingCode = "+672", Code = "NF", Enabled = true, Name = "Norfolk Island" },
                        new { Id = new Guid("c50719ef-6ccb-41d7-9244-5c82dde5e804"), CallingCode = "+850", Code = "KP", Enabled = true, Name = "Korea (Democratic People's Republic of)" },
                        new { Id = new Guid("1b6384c7-92a9-42b3-b996-c0b134ab1170"), CallingCode = "+1670", Code = "MP", Enabled = true, Name = "Northern Mariana Islands" },
                        new { Id = new Guid("3abddad7-fa8f-456b-a590-33c5083b98dd"), CallingCode = "+47", Code = "NO", Enabled = true, Name = "Norway" },
                        new { Id = new Guid("be94fb67-a08c-419f-a9bc-dda56d4b5096"), CallingCode = "+968", Code = "OM", Enabled = true, Name = "Oman" },
                        new { Id = new Guid("5c62dbd2-c02e-4ae9-8b14-031c6c874659"), CallingCode = "+92", Code = "PK", Enabled = true, Name = "Pakistan" },
                        new { Id = new Guid("cc76e0b5-40d7-40cc-ac59-c6dcd1b29cf0"), CallingCode = "+680", Code = "PW", Enabled = true, Name = "Palau" },
                        new { Id = new Guid("e6e85a31-ae53-43ee-b21a-f6ed0538b020"), CallingCode = "+970", Code = "PS", Enabled = true, Name = "Palestine, State of" },
                        new { Id = new Guid("64197b44-3373-4b0f-ada8-64a0066029ff"), CallingCode = "+507", Code = "PA", Enabled = true, Name = "Panama" },
                        new { Id = new Guid("da4bd7d8-23a5-4a40-804f-e9a67cfa93a6"), CallingCode = "+675", Code = "PG", Enabled = true, Name = "Papua New Guinea" },
                        new { Id = new Guid("c5f5f3ee-f4e1-4569-8e92-58a2b4a569cb"), CallingCode = "+595", Code = "PY", Enabled = true, Name = "Paraguay" },
                        new { Id = new Guid("994c8be2-8fa3-43ee-a725-41895002f499"), CallingCode = "+51", Code = "PE", Enabled = true, Name = "Peru" },
                        new { Id = new Guid("04549a74-b458-4bc6-94de-d339d5ed12e1"), CallingCode = "+63", Code = "PH", Enabled = true, Name = "Philippines" },
                        new { Id = new Guid("7fbe832c-04f2-4f09-932c-af642d295032"), CallingCode = "+64", Code = "PN", Enabled = true, Name = "Pitcairn" },
                        new { Id = new Guid("c92e3b7f-e7aa-4b23-bd38-8ef653b7f7a2"), CallingCode = "+48", Code = "PL", Enabled = true, Name = "Poland" },
                        new { Id = new Guid("1855fe95-33ad-4a68-bcc3-c57ed85ce329"), CallingCode = "+351", Code = "pt", Enabled = true, Name = "Portugal" },
                        new { Id = new Guid("ac050c4f-a0bc-4e0d-88ca-2853b9438d85"), CallingCode = "+1787", Code = "PR", Enabled = true, Name = "Puerto Rico" },
                        new { Id = new Guid("ac714d22-4b36-4776-b842-728d72319087"), CallingCode = "+974", Code = "QA", Enabled = true, Name = "Qatar" },
                        new { Id = new Guid("d55e3ff4-05e5-41f3-9e63-7a330f920950"), CallingCode = "+383", Code = "XK", Enabled = true, Name = "Republic of Kosovo" },
                        new { Id = new Guid("7401ab85-99a8-40bd-b5b0-c4d94d25aa69"), CallingCode = "+262", Code = "RE", Enabled = true, Name = "Réunion" },
                        new { Id = new Guid("1d27b72f-31d6-4568-86cc-7b6ae7e206a3"), CallingCode = "+40", Code = "RO", Enabled = true, Name = "Romania" },
                        new { Id = new Guid("302ecafb-2dcb-466c-ab01-cf12d7b1544e"), CallingCode = "+7", Code = "RU", Enabled = true, Name = "Russian Federation" },
                        new { Id = new Guid("bdbdeb23-9199-4a6c-b0f5-33014965fe40"), CallingCode = "+250", Code = "RW", Enabled = true, Name = "Rwanda" },
                        new { Id = new Guid("afc0c551-cec0-4999-a9fe-7f92710785ac"), CallingCode = "+590", Code = "BL", Enabled = true, Name = "Saint Barthélemy" },
                        new { Id = new Guid("fcdc7d01-ea17-4ac8-b712-f778ee2de9f2"), CallingCode = "+290", Code = "SH", Enabled = true, Name = "Saint Helena, Ascension and Tristan da Cunha" },
                        new { Id = new Guid("fcb3d8e1-2a9c-470f-b7c5-15dea06477c9"), CallingCode = "+1869", Code = "KN", Enabled = true, Name = "Saint Kitts and Nevis" },
                        new { Id = new Guid("e0be6610-da6e-4d3d-8699-8825fb4ee337"), CallingCode = "+1758", Code = "LC", Enabled = true, Name = "Saint Lucia" },
                        new { Id = new Guid("bba868d5-0661-4421-8141-b13297e96218"), CallingCode = "+590", Code = "MF", Enabled = true, Name = "Saint Martin (French part)" },
                        new { Id = new Guid("a0abe09e-395c-48d3-bef7-3f9282b1c60d"), CallingCode = "+508", Code = "PM", Enabled = true, Name = "Saint Pierre and Miquelon" },
                        new { Id = new Guid("7f8afd92-61bd-477c-bf78-12d62b3e5cb5"), CallingCode = "+1784", Code = "VC", Enabled = true, Name = "Saint Vincent and the Grenadines" },
                        new { Id = new Guid("64684184-0951-47e4-bac3-282314ccc2bd"), CallingCode = "+685", Code = "WS", Enabled = true, Name = "Samoa" },
                        new { Id = new Guid("f59c01d4-367d-4773-8c4c-2b47e4f2e3a0"), CallingCode = "+378", Code = "SM", Enabled = true, Name = "San Marino" },
                        new { Id = new Guid("c052a003-3341-442e-825b-fcbc3c208498"), CallingCode = "+239", Code = "ST", Enabled = true, Name = "Sao Tome and Principe" },
                        new { Id = new Guid("2a7a8f6b-dda3-4799-8491-f4d03825899a"), CallingCode = "+966", Code = "SA", Enabled = true, Name = "Saudi Arabia" },
                        new { Id = new Guid("c3cdf8e2-45c4-4f11-a91d-fa1a43bcd9f9"), CallingCode = "+221", Code = "SN", Enabled = true, Name = "Senegal" },
                        new { Id = new Guid("f2fde10e-0e24-4a72-9f1f-2c248bae340c"), CallingCode = "+381", Code = "RS", Enabled = true, Name = "Serbia" },
                        new { Id = new Guid("36a1b84a-849d-4fb1-ba49-8b8d85011554"), CallingCode = "+248", Code = "SC", Enabled = true, Name = "Seychelles" },
                        new { Id = new Guid("142dac4e-e495-4c29-aaac-5aa6c2b2f630"), CallingCode = "+232", Code = "SL", Enabled = true, Name = "Sierra Leone" },
                        new { Id = new Guid("ede02c3f-9b24-4d85-a0c7-021e5386c861"), CallingCode = "+65", Code = "SG", Enabled = true, Name = "Singapore" },
                        new { Id = new Guid("0bf9b7ac-0e84-41bd-8e97-b81352e451f2"), CallingCode = "+1721", Code = "SX", Enabled = true, Name = "Sint Maarten (Dutch part)" },
                        new { Id = new Guid("efa9f8fb-92f8-46da-8171-b2947811b8cf"), CallingCode = "+421", Code = "SK", Enabled = true, Name = "Slovakia" },
                        new { Id = new Guid("5ad56577-7098-4515-b010-06324670a069"), CallingCode = "+386", Code = "SI", Enabled = true, Name = "Slovenia" },
                        new { Id = new Guid("871803b6-865a-4aee-8e4d-95189da19c50"), CallingCode = "+677", Code = "SB", Enabled = true, Name = "Solomon Islands" },
                        new { Id = new Guid("6aeaa091-8c4b-47a9-94f0-6e2b9636bf72"), CallingCode = "+252", Code = "SO", Enabled = true, Name = "Somalia" },
                        new { Id = new Guid("4474dd19-7cff-4df2-9de6-f1f52b9aa94c"), CallingCode = "+27", Code = "ZA", Enabled = true, Name = "South Africa" },
                        new { Id = new Guid("3fdd5f8d-f594-41d3-aeb6-ffabcfe62f36"), CallingCode = "+500", Code = "GS", Enabled = true, Name = "South Georgia and the South Sandwich Islands" },
                        new { Id = new Guid("8a951ed8-ca8c-4e8a-8232-d728d8a8a3e5"), CallingCode = "+82", Code = "KR", Enabled = true, Name = "Korea (Republic of)" },
                        new { Id = new Guid("a9501973-f190-471f-b299-acd6085ccfbc"), CallingCode = "+211", Code = "SS", Enabled = true, Name = "South Sudan" },
                        new { Id = new Guid("c6b48dac-ceaf-45f6-a71c-70dcb28e3dd3"), CallingCode = "+34", Code = "es", Enabled = true, Name = "Spain" },
                        new { Id = new Guid("20b93646-a854-4cbc-9e45-f32cfe536f00"), CallingCode = "+94", Code = "LK", Enabled = true, Name = "Sri Lanka" },
                        new { Id = new Guid("c355b129-8496-4f66-b39b-a05b1e140f24"), CallingCode = "+249", Code = "SD", Enabled = true, Name = "Sudan" },
                        new { Id = new Guid("0b153c4a-481f-4cbb-a488-d8e71ea05ff3"), CallingCode = "+597", Code = "SR", Enabled = true, Name = "Suriname" },
                        new { Id = new Guid("0516741a-702a-4c5a-9b7e-92f21356b336"), CallingCode = "+4779", Code = "SJ", Enabled = true, Name = "Svalbard and Jan Mayen" },
                        new { Id = new Guid("900794cd-2b60-41da-97ae-c7bc082f9cf9"), CallingCode = "+268", Code = "SZ", Enabled = true, Name = "Swaziland" },
                        new { Id = new Guid("453ffcfa-6e29-41db-99a1-72d0067abf30"), CallingCode = "+46", Code = "SE", Enabled = true, Name = "Sweden" },
                        new { Id = new Guid("f7fd2d44-31cc-4b71-8afd-cedf532cc605"), CallingCode = "+41", Code = "CH", Enabled = true, Name = "Switzerland" },
                        new { Id = new Guid("bc198476-8c8b-433e-80ad-c78d93b65758"), CallingCode = "+963", Code = "SY", Enabled = true, Name = "Syrian Arab Republic" },
                        new { Id = new Guid("f1e7967a-0237-4ec2-95bc-f92fb9cf5537"), CallingCode = "+886", Code = "TW", Enabled = true, Name = "Taiwan" },
                        new { Id = new Guid("e796d639-b073-4de5-b761-907ea7fc4ffc"), CallingCode = "+992", Code = "TJ", Enabled = true, Name = "Tajikistan" },
                        new { Id = new Guid("22936236-016e-4c06-aff9-d33d56c7c901"), CallingCode = "+255", Code = "TZ", Enabled = true, Name = "Tanzania, United Republic of" },
                        new { Id = new Guid("5198fbd1-17c2-4130-b3ba-377c37c893af"), CallingCode = "+66", Code = "TH", Enabled = true, Name = "Thailand" },
                        new { Id = new Guid("431af217-da9c-49c0-862d-346c3f154807"), CallingCode = "+670", Code = "TL", Enabled = true, Name = "Timor-Leste" },
                        new { Id = new Guid("91296619-d79b-4f9f-b0b1-5356f17bf26e"), CallingCode = "+228", Code = "TG", Enabled = true, Name = "Togo" },
                        new { Id = new Guid("6022bae6-98fd-4aa6-8900-b747f6c35044"), CallingCode = "+690", Code = "TK", Enabled = true, Name = "Tokelau" },
                        new { Id = new Guid("7945287d-cd87-4153-a98d-341a50f701bf"), CallingCode = "+676", Code = "TO", Enabled = true, Name = "Tonga" },
                        new { Id = new Guid("68f56a68-74d2-4ff9-99cb-a946d96edd1b"), CallingCode = "+1868", Code = "TT", Enabled = true, Name = "Trinidad and Tobago" },
                        new { Id = new Guid("6a1bb25b-a7c8-4a72-bbfa-e3e7f0a7112b"), CallingCode = "+216", Code = "TN", Enabled = true, Name = "Tunisia" },
                        new { Id = new Guid("7b1130ba-25c5-4886-8683-9955f720c67e"), CallingCode = "+90", Code = "TR", Enabled = true, Name = "Turkey" },
                        new { Id = new Guid("6aa8a2e4-5b28-4fc0-a1ad-e80ad2426ede"), CallingCode = "+993", Code = "TM", Enabled = true, Name = "Turkmenistan" },
                        new { Id = new Guid("e445207e-d79a-40b1-a108-3f6f8a37d503"), CallingCode = "+1649", Code = "TC", Enabled = true, Name = "Turks and Caicos Islands" },
                        new { Id = new Guid("1eb5343a-b090-4efc-a684-ba5d5a613516"), CallingCode = "+688", Code = "TV", Enabled = true, Name = "Tuvalu" },
                        new { Id = new Guid("d2fc318d-ef9a-49d3-8db3-1264b8415728"), CallingCode = "+256", Code = "UG", Enabled = true, Name = "Uganda" },
                        new { Id = new Guid("bb691dd6-b2e1-4a61-8329-58f233d66d3a"), CallingCode = "+380", Code = "UA", Enabled = true, Name = "Ukraine" },
                        new { Id = new Guid("54d6b82d-49da-44a5-8387-44eb555c8d44"), CallingCode = "+971", Code = "AE", Enabled = true, Name = "United Arab Emirates" },
                        new { Id = new Guid("9f53e4c4-bc1e-4d26-b0a0-d1d589f9e443"), CallingCode = "+44", Code = "GB", Enabled = true, Name = "United Kingdom of Great Britain and Northern Ireland" },
                        new { Id = new Guid("b54fac30-8dbd-4c34-921b-ecb780d45e05"), CallingCode = "+1", Code = "US", Enabled = true, Name = "United States of America" },
                        new { Id = new Guid("05e5ab87-dc04-404e-925d-ac6c90d82427"), CallingCode = "+598", Code = "UY", Enabled = true, Name = "Uruguay" },
                        new { Id = new Guid("83e157d8-1021-4d51-9a4a-2d627e769456"), CallingCode = "+998", Code = "UZ", Enabled = true, Name = "Uzbekistan" },
                        new { Id = new Guid("dd4b36b5-4499-48c7-ae89-b8f18c4b6fb9"), CallingCode = "+678", Code = "VU", Enabled = true, Name = "Vanuatu" },
                        new { Id = new Guid("feb9d6d5-2327-4065-9cbc-a80d0b0ebc89"), CallingCode = "+58", Code = "VE", Enabled = true, Name = "Venezuela (Bolivarian Republic of)" },
                        new { Id = new Guid("c046fa0d-300b-4d38-b811-34aebae66b83"), CallingCode = "+84", Code = "VN", Enabled = true, Name = "Viet Nam" },
                        new { Id = new Guid("7973277f-00e4-4518-be78-a811f244bed5"), CallingCode = "+681", Code = "WF", Enabled = true, Name = "Wallis and Futuna" },
                        new { Id = new Guid("12d54c0e-6444-43fb-b27e-d82e319480e3"), CallingCode = "+212", Code = "EH", Enabled = true, Name = "Western Sahara" },
                        new { Id = new Guid("8f532a74-0192-43ce-88e2-b57335b1daaf"), CallingCode = "+967", Code = "YE", Enabled = true, Name = "Yemen" },
                        new { Id = new Guid("77c07dae-8595-4c6a-870f-02d6461dd202"), CallingCode = "+260", Code = "ZM", Enabled = true, Name = "Zambia" },
                        new { Id = new Guid("6c234af4-d025-4815-924e-1d98609128ae"), CallingCode = "+263", Code = "ZW", Enabled = true, Name = "Zimbabwe" }
                    );
                });

            modelBuilder.Entity("xappido.Directory.Domain.Model.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<string>("Key");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("Type");

                    b.Property<Guid?>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.PermissionAssignment<aiala.Backend.Data.Tenant, aiala.Backend.Data.Account, aiala.Backend.Data.User>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<Guid?>("PermissionGroupId");

                    b.Property<string>("PermissionType");

                    b.Property<Guid?>("TenantId");

                    b.Property<DateTimeOffset?>("ValidFrom");

                    b.Property<DateTimeOffset?>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PermissionGroupId");

                    b.HasIndex("TenantId");

                    b.ToTable("PermissionAssignments","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.PermissionGroup<aiala.Backend.Data.Tenant>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AppId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("TenantId");

                    b.ToTable("PermissionGroups","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.PermissionGroupAssignment<aiala.Backend.Data.Tenant, aiala.Backend.Data.Account, aiala.Backend.Data.User>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId");

                    b.ToTable("PermissionGroupAssignments","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.Registration<aiala.Backend.Data.Tenant>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApprovalRequired");

                    b.Property<string>("ApprovalToken");

                    b.Property<DateTimeOffset?>("Approved");

                    b.Property<string>("ApprovedBy");

                    b.Property<DateTimeOffset?>("Completed");

                    b.Property<string>("ConfirmationToken")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("Confirmed");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<Guid?>("CreatedAccountId");

                    b.Property<Guid?>("CreatedSubscriptionId");

                    b.Property<string>("Culture");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalUserId");

                    b.Property<Guid?>("SubscriptionTypeId");

                    b.Property<Guid?>("TenantId");

                    b.Property<int>("TenantType");

                    b.Property<string>("Values")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Registrations","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.Subscription<aiala.Backend.Data.Tenant>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created");

                    b.Property<Guid?>("SubscriptionTypeId");

                    b.Property<Guid?>("TenantId");

                    b.Property<DateTimeOffset?>("ValidFrom");

                    b.Property<DateTimeOffset?>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("Subscriptions","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.SubscriptionActivation<aiala.Backend.Data.Tenant>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivationType");

                    b.Property<bool>("ApprovalRequired");

                    b.Property<string>("Approvers");

                    b.Property<Guid?>("DefaultTenantId");

                    b.Property<int>("DefaultTenantType");

                    b.Property<Guid?>("SubscriptionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTenantId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("SubscriptionActivations","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.SubscriptionActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("Activated");

                    b.Property<string>("ActivationKey");

                    b.Property<Guid?>("SubscriptionActivationId");

                    b.Property<DateTimeOffset?>("ValidFrom");

                    b.Property<DateTimeOffset?>("ValidTo");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionActivationId");

                    b.ToTable("SubscriptionActivationCodes","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.SubscriptionType<aiala.Backend.Data.Tenant>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AppId");

                    b.Property<string>("Description");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Features");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("SubscriptionLengthInDays");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.ToTable("SubscriptionTypes","directory");
                });

            modelBuilder.Entity("xappido.Directory.Domain.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Culture");

                    b.Property<string>("Entity");

                    b.Property<string>("Reference");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Entity", "Reference", "Culture")
                        .IsUnique()
                        .HasFilter("[Entity] IS NOT NULL AND [Reference] IS NOT NULL AND [Culture] IS NOT NULL");

                    b.ToTable("Translations","directory");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.EmergencyActivity", b =>
                {
                    b.HasBaseType("aiala.Backend.Data.Activities.Activity");

                    b.Property<Guid>("EmergencyId");

                    b.ToTable("EmergencyActivity");

                    b.HasDiscriminator().HasValue("EmergencyActivity");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.GeneralActivity", b =>
                {
                    b.HasBaseType("aiala.Backend.Data.Activities.Activity");


                    b.ToTable("GeneralActivity");

                    b.HasDiscriminator().HasValue("GeneralActivity");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.PictureActivity", b =>
                {
                    b.HasBaseType("aiala.Backend.Data.Activities.Activity");

                    b.Property<Guid?>("PictureId");

                    b.HasIndex("PictureId");

                    b.ToTable("PictureActivity");

                    b.HasDiscriminator().HasValue("PictureActivity");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.ScheduledStepActivity", b =>
                {
                    b.HasBaseType("aiala.Backend.Data.Activities.Activity");

                    b.Property<Guid?>("StepId");

                    b.HasIndex("StepId");

                    b.ToTable("ScheduledStepActivity");

                    b.HasDiscriminator().HasValue("ScheduledStepActivity");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.ScheduledTaskActivity", b =>
                {
                    b.HasBaseType("aiala.Backend.Data.Activities.Activity");

                    b.Property<Guid?>("TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ScheduledTaskActivity");

                    b.HasDiscriminator().HasValue("ScheduledTaskActivity");
                });

            modelBuilder.Entity("aiala.Backend.Data.Account", b =>
                {
                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("aiala.Backend.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("xappido.Directory.Domain.Invitation", "Invitation", b1 =>
                        {
                            b1.Property<Guid?>("AccountId");

                            b1.Property<DateTimeOffset?>("Accepted");

                            b1.Property<string>("ConfirmationToken");

                            b1.Property<DateTimeOffset?>("Created");

                            b1.Property<DateTimeOffset?>("Declined");

                            b1.Property<Guid?>("InviterId");

                            b1.Property<string>("Message");

                            b1.Property<int>("Resent");

                            b1.Property<int>("Status")
                                .ValueGeneratedOnAddOrUpdate()
                                .HasComputedColumnSql(@"CAST
                    (
                    CASE
                        WHEN [Invitation_Declined] IS NOT NULL THEN 3
                        WHEN [Invitation_Accepted] IS NOT NULL THEN 4
                        WHEN [Invitation_ValidUntil] IS NOT NULL AND [Invitation_ValidUntil] < GETUTCDATE() THEN 2
                        WHEN [Invitation_Created] IS NOT NULL THEN 1
                        ELSE 0
                    END AS INT
                    )");

                            b1.Property<DateTimeOffset?>("ValidUntil");

                            b1.ToTable("Accounts","directory");

                            b1.HasOne("aiala.Backend.Data.Account")
                                .WithOne("Invitation")
                                .HasForeignKey("xappido.Directory.Domain.Invitation", "AccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.Activity", b =>
                {
                    b.HasOne("aiala.Backend.Data.Schedule.ScheduledStep", "ActiveStep")
                        .WithMany()
                        .HasForeignKey("ActiveStepId");

                    b.HasOne("aiala.Backend.Data.Schedule.ScheduledTask", "ActiveTask")
                        .WithMany()
                        .HasForeignKey("ActiveTaskId");

                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Pictures.AiPictureMetadata", b =>
                {
                    b.HasOne("aiala.Backend.Data.Pictures.Picture", "Picture")
                        .WithOne("AiMetadata")
                        .HasForeignKey("aiala.Backend.Data.Pictures.AiPictureMetadata", "PictureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aiala.Backend.Data.Pictures.AiPictureTag", b =>
                {
                    b.HasOne("aiala.Backend.Data.Pictures.AiPictureMetadata", "Picture")
                        .WithMany("Tags")
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Pictures.Picture", b =>
                {
                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Places.Place", b =>
                {
                    b.HasOne("aiala.Backend.Data.Pictures.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.Day", b =>
                {
                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.ScheduledPlace", b =>
                {
                    b.HasOne("aiala.Backend.Data.Pictures.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("aiala.Backend.Data.Places.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("aiala.Backend.Data.Schedule.ScheduledTask", "Task")
                        .WithOne("Place")
                        .HasForeignKey("aiala.Backend.Data.Schedule.ScheduledPlace", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.ScheduledStep", b =>
                {
                    b.HasOne("aiala.Backend.Data.Schedule.ScheduledTask", "Task")
                        .WithMany("Steps")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Schedule.ScheduledTask", b =>
                {
                    b.HasOne("aiala.Backend.Data.Schedule.Day", "Day")
                        .WithMany("Tasks")
                        .HasForeignKey("DayId");

                    b.HasOne("aiala.Backend.Data.Account", "EmergencyContact1")
                        .WithMany()
                        .HasForeignKey("EmergencyContact1Id");

                    b.HasOne("aiala.Backend.Data.Account", "EmergencyContact2")
                        .WithMany()
                        .HasForeignKey("EmergencyContact2Id");

                    b.HasOne("aiala.Backend.Data.Pictures.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("aiala.Backend.Data.Tasks.AppTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Tasks.AppTask", b =>
                {
                    b.HasOne("aiala.Backend.Data.Account", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("aiala.Backend.Data.Account", "EmergencyContact1")
                        .WithMany()
                        .HasForeignKey("EmergencyContact1Id");

                    b.HasOne("aiala.Backend.Data.Account", "EmergencyContact2")
                        .WithMany()
                        .HasForeignKey("EmergencyContact2Id");

                    b.HasOne("aiala.Backend.Data.Pictures.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("aiala.Backend.Data.Places.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Tasks.Step", b =>
                {
                    b.HasOne("aiala.Backend.Data.Tasks.AppTask", "Task")
                        .WithMany("Steps")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Templates.DayTemplate", b =>
                {
                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Templates.ScheduledTaskTemplate", b =>
                {
                    b.HasOne("aiala.Backend.Data.Templates.DayTemplate", "DayTemplate")
                        .WithMany("Tasks")
                        .HasForeignKey("DayTemplateId");

                    b.HasOne("aiala.Backend.Data.Tasks.AppTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("xappido.Directory.Domain.PermissionAssignment<aiala.Backend.Data.Tenant, aiala.Backend.Data.Account, aiala.Backend.Data.User>", b =>
                {
                    b.HasOne("aiala.Backend.Data.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("xappido.Directory.Domain.PermissionGroup<aiala.Backend.Data.Tenant>", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId");

                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("xappido.Directory.Domain.PermissionGroup<aiala.Backend.Data.Tenant>", b =>
                {
                    b.HasOne("xappido.Directory.Domain.App<aiala.Backend.Data.Tenant>", "App")
                        .WithMany()
                        .HasForeignKey("AppId");

                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("xappido.Directory.Domain.PermissionGroupAssignment<aiala.Backend.Data.Tenant, aiala.Backend.Data.Account, aiala.Backend.Data.User>", b =>
                {
                    b.HasOne("aiala.Backend.Data.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("xappido.Directory.Domain.PermissionGroup<aiala.Backend.Data.Tenant>", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("xappido.Directory.Domain.Registration<aiala.Backend.Data.Tenant>", b =>
                {
                    b.HasOne("xappido.Directory.Domain.SubscriptionType<aiala.Backend.Data.Tenant>", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId");
                });

            modelBuilder.Entity("xappido.Directory.Domain.Subscription<aiala.Backend.Data.Tenant>", b =>
                {
                    b.HasOne("xappido.Directory.Domain.SubscriptionType<aiala.Backend.Data.Tenant>", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId");

                    b.HasOne("aiala.Backend.Data.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("xappido.Directory.Domain.SubscriptionActivation<aiala.Backend.Data.Tenant>", b =>
                {
                    b.HasOne("aiala.Backend.Data.Tenant", "DefaultTenant")
                        .WithMany()
                        .HasForeignKey("DefaultTenantId");

                    b.HasOne("xappido.Directory.Domain.SubscriptionType<aiala.Backend.Data.Tenant>", "SubscriptionType")
                        .WithMany("Activations")
                        .HasForeignKey("SubscriptionTypeId");
                });

            modelBuilder.Entity("xappido.Directory.Domain.SubscriptionActivationCode", b =>
                {
                    b.HasOne("xappido.Directory.Domain.SubscriptionActivation<aiala.Backend.Data.Tenant>")
                        .WithMany("Codes")
                        .HasForeignKey("SubscriptionActivationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("xappido.Directory.Domain.SubscriptionType<aiala.Backend.Data.Tenant>", b =>
                {
                    b.HasOne("xappido.Directory.Domain.App<aiala.Backend.Data.Tenant>", "App")
                        .WithMany("SubscriptionTypes")
                        .HasForeignKey("AppId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.PictureActivity", b =>
                {
                    b.HasOne("aiala.Backend.Data.Pictures.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.ScheduledStepActivity", b =>
                {
                    b.HasOne("aiala.Backend.Data.Schedule.ScheduledStep", "Step")
                        .WithMany()
                        .HasForeignKey("StepId");
                });

            modelBuilder.Entity("aiala.Backend.Data.Activities.ScheduledTaskActivity", b =>
                {
                    b.HasOne("aiala.Backend.Data.Schedule.ScheduledTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");
                });
#pragma warning restore 612, 618
        }
    }
}
